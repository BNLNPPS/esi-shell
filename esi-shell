#!/usr/bin/env bash

set -u

abort() {
  printf "%s\n" "$@" >&2
  exit 1
}

# Fail fast with a concise message when not using bash
# Single brackets are needed here for POSIX compatibility
# shellcheck disable=SC2292
if [ -z "${BASH_VERSION:-}" ]
then
  abort "Bash is required to interpret this script."
fi

# Fail fast if OS is not Linux or macOS
OS=$(uname)
if [[ "$OS" != "Linux" && "$OS" != "Darwin" ]]
then
  abort "esi-shell is only supported on Linux and macOS."
fi

REQUIRED_SINGULARITY_VERSION=3.7.4
REQUIRED_DOCKER_VERSION=23.0.0

# set default values
IMAGE_NAME="ghcr.io/bnlnpps/esi-shell"
IMAGE_TAG="latest"
ESI_SHELL_VERSION=1.0.0-beta.21
CONTAINER_COMMAND=
CONTAINER_OPTIONS=

usage() {
  echo "Start esi-shell, the ESI containerized software environment."
  echo ""
  echo "USAGE:"
  echo "  ./esi-shell [OPTIONS] [COMMAND] [-- CONTAINER_OPTIONS]"
  echo ""
  echo "OPTIONS:"
  echo "  -h, --help       Print this message"
  echo "  -t, --tag        Specific esi-shell tag to use (Default: $IMAGE_TAG)"
  echo "      --version    Print esi-shell version"
  echo ""
  echo "COMMAND is a command to execute in the container, leave it empty for interactive shell. For example:"
  echo "  pwd"
  echo "  ls -la"
  echo "  echo '\$HOME'"
  echo "  tests/test_opticks.sh"
  echo ""
  echo "CONTAINER_OPTIONS will be passed to the underlying container command. For example:"
  echo "  -- --volume \$PWD/mytests:/tmp/mytests"
  echo "  -- -v \$HOME/optix:/usr/local/optix -e OPTICKS_OPTIX_PREFIX=/usr/local/optix"
  echo ""
  echo "EXAMPLES:"
  echo "  - Start an interactive shell: ./esi-shell" 
  echo "  - Use specific tag:           ./esi-shell -t 0.1.0"
  echo "  - Execute a single command:   ./esi-shell 'echo \$OPTIX_DIR'"
  echo "  - Configure remote image:     ./esi-shell -- --pull=always -e HOME=\$HOME"
  echo ""
  exit "${1:-0}"
}

# string formatters
if [[ -t 1 ]]
then
  tty_escape() { printf "\033[%sm" "$1"; }
else
  tty_escape() { :; }
fi
tty_mkbold() { tty_escape "1;$1"; }
tty_underline="$(tty_escape "4;39")"
tty_blue="$(tty_mkbold 34)"
tty_red="$(tty_mkbold 31)"
tty_bold="$(tty_mkbold 39)"
tty_reset="$(tty_escape 0)"

shell_join() {
  local arg
  printf "%s" "$1"
  shift
  for arg in "$@"
  do
    printf " "
    printf "%s" "${arg// /\ }"
  done
}

chomp() {
  printf "%s" "${1/"$'\n'"/}"
}

ohai() {
  printf "${tty_blue}==>${tty_bold} %s${tty_reset}\n" "$(shell_join "$@")"
}

warn() {
  printf "${tty_red}Warning${tty_reset}: %s\n" "$(chomp "$1")" >&2
}


while [[ $# -gt 0 ]]
do
  case $1 in
    -t | --tag)
      IMAGE_TAG=${2:-$IMAGE_TAG}
      shift
      shift
      ;;
    -h | --help)
      usage 0
      ;;
    --version)
      echo "${ESI_SHELL_VERSION-}"
      exit 0
      ;;
    --)
      shift
      CONTAINER_OPTIONS="$@"
      break
      ;;
    -*)
      warn "Unrecognized option: '$1'"
      usage 1
      break
      ;;
    *)
      _ALL_OTHER_ARGS="$@"
      CONTAINER_COMMAND=${_ALL_OTHER_ARGS%% -- *}
      CONTAINER_OPTIONS=${_ALL_OTHER_ARGS#* -- }
      CONTAINER_OPTIONS=$([[ $CONTAINER_OPTIONS == $CONTAINER_COMMAND ]] && echo "" || echo "$CONTAINER_OPTIONS")
      break
      ;;
  esac
done

execute() {
  if ! "$@"
  then
    abort "$(printf "Failed during: %s" "$(shell_join "$@")")"
  fi
}

major_minor() {
  echo "${1%%.*}.$(
    x="${1#*.}"
    echo "${x%%.*}"
  )"
}

version_gt() {
  [[ "${1%.*}" -gt "${2%.*}" ]] || [[ "${1%.*}" -eq "${2%.*}" && "${1#*.}" -gt "${2#*.}" ]]
}
version_ge() {
  [[ "${1%.*}" -gt "${2%.*}" ]] || [[ "${1%.*}" -eq "${2%.*}" && "${1#*.}" -ge "${2#*.}" ]]
}
version_lt() {
  [[ "${1%.*}" -lt "${2%.*}" ]] || [[ "${1%.*}" -eq "${2%.*}" && "${1#*.}" -lt "${2#*.}" ]]
}

test_singularity() {
  if [[ ! -x "$1" ]]
  then
    return 1
  fi

  local singularity_version_output
  singularity_version_output="$("$1" version 2>/dev/null)"
  if [[ "${singularity_version_output}" =~ (^[0-9]+\.[0-9]+\.[0-9]+) ]]
  then
    #ohai "sing v: ${BASH_REMATCH[1]}"
    version_ge "$(major_minor "${BASH_REMATCH[1]}")" "$(major_minor "${REQUIRED_SINGULARITY_VERSION}")"
  else
    abort "Unexpected singularity version: '${singularity_version_output}'!"
  fi
}

test_docker() {
  if [[ ! -x "$1" ]]
  then
    return 1
  fi

  local docker_version_output
  docker_version_output="$("$1" --version 2>/dev/null)"
  if [[ "${docker_version_output}" =~ "Docker version "([0-9]+\.[0-9]+\.[0-9]+) ]]
  then
    #ohai "docker v: ${BASH_REMATCH[1]}"
    version_ge "$(major_minor "${BASH_REMATCH[1]}")" "$(major_minor "${REQUIRED_DOCKER_VERSION}")"
  else
    abort "Unexpected docker version: '${docker_version_output}'!"
  fi
}

# Search for the given executable in PATH (avoids a dependency on the `which` command)
which() {
  # Alias to Bash built-in command `type -P`
  type -P "$@"
}

# Search PATH for the specified program
# function which is set above
find_tool() {
  if [[ $# -ne 1 ]]
  then
    return 1
  fi

  local executable
  while read -r executable
  do
    if [[ "${executable}" != /* ]]
    then
      warn "Ignoring ${executable} (relative paths don't work)"
    elif "test_$1" "${executable}"
    then
      echo "${executable}"
      break
    fi
  done < <(which -a "$1")
}

# Call with a prompt string or use a default
confirm() {
  read -r -p "${1:-Are you sure? [y/n]} " response
  if [[ "${response:=$2}" =~ ^([yY][eE][sS]|[yY])+$ ]]
  then
    true
  else
    false
  fi
}

# Test for GPU functionality
check_gpu_driver() {
  if [[ "${OS}" == "Darwin" ]]
  then
    warn "GPU functionality is not supported on macOS"
    return 1
  fi
  # Check if libcuda.so.1 -- the CUDA driver -- is present in the ld.so cache or in LD_LIBRARY_PATH
  _LIBCUDA_FROM_LD_CACHE=$(ldconfig -p | grep libcuda.so.1)
  _LIBCUDA_FROM_LD_LIBRARY_PATH=$( ( IFS=: ; for i in ${LD_LIBRARY_PATH-}; do ls $i/libcuda.so.1 2>/dev/null | grep -v compat; done) )
  _LIBCUDA_FOUND="${_LIBCUDA_FROM_LD_CACHE}${_LIBCUDA_FROM_LD_LIBRARY_PATH}"
  
  # Check if /dev/nvidiactl (like on Linux) or /dev/dxg (like on WSL2) or /dev/nvgpu (like on Tegra) is present
  _DRIVER_FOUND=$(ls /dev/nvidiactl /dev/dxg /dev/nvgpu 2>/dev/null)
  
  # If either is not true, then GPU functionality won't be usable.
  [[ "${_LIBCUDA_FOUND}" && "${_DRIVER_FOUND}" ]]
}


if check_gpu_driver
then
  DOCKER_GPU="--gpus all"
fi

WORKDIR=${WORKDIR:-$HOME}
OPTIX_DIR=${OPTIX_DIR:-/usr/local/optix}

for dir in /tmp $WORKDIR $OPTIX_DIR
do
  ## only add directories once
  if [[ ${DOCKER_BIND_VOLUME-} =~ $(basename $dir) ]]; then
    continue
  fi
  if [ -d $dir ]; then
    DOCKER_BIND_VOLUME="${DOCKER_BIND_VOLUME-} -v $dir:$dir"
  fi
done

#if [ `uname -m` = "arm64" ]; then
#  DOCKER_PLATFORM="--platform linux/amd64"
#fi

if [[ -z ${CONTAINER_COMMAND-} ]]
then
  CONTAINER_OPTIONS+=" -i -t"
fi

USABLE_SINGULARITY="$(find_tool singularity)"
USABLE_DOCKER="$(find_tool docker)"

IMG=${IMAGE_NAME}:${IMAGE_TAG}
ohai "Using esi-shell image: ${IMG}"

if [[ -n "${USABLE_DOCKER-}" ]]
then
  cmd="docker run --rm ${DOCKER_GPU-} ${DOCKER_PLATFORM-} ${DOCKER_BIND_VOLUME-} -e OPTICKS_OPTIX_PREFIX=${OPTIX_DIR} ${CONTAINER_OPTIONS} ${IMG} ${CONTAINER_COMMAND}"
  exec $cmd
else
  abort "Docker client (>= $REQUIRED_DOCKER_VERSION) must be installed to proceed."
fi
